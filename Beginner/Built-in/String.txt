문자를 연결하는 방법
+를 사용하여 연결가능 역슬래시를 사용해서도 가능하지만 많이 사용하지 않음

new String() => 인스턴스 생성
String() => 문자열로 변환하여 반환
formCharCode() => 유니코드를 문자열로 변환하여 반환 즉 사람이 읽을수있는 코드로 변환
length => 문자열의 문자 수 반환
constructor => 생성자
valueOf() => 프리미티브 값 반환
toString() => 문자열로 변환
charAt() => 인덱스 번째 문자 반환
indexOf() => 일치하는 문자열 중에서 가장 작은 인덱스 반환
lastIndexOf() => 일치하는 문자열 중에서가장 큰 인덱스 반환
concat() => 문자열 연결
toLowerCase() => 소문자로 변환
toUpperCase() => 대문자로 변환
trim() => 문자열 앞뒤의 화이트 스페이스 삭제
substr() => 시작 위치부터 지정한 문자 수 반환
slice() => 시작에서 끝 직전까지 값 반환,
match() => 매치 결과 반환
replace() => 매치 결과를 지정한 값으로 대체
search() => 검색된 첫 번째 인덱스 반환
split() => 구분자로 분리하여 반환
charCodeAt() => 인덱스 번째 문자를 유니코드로 반환
localeCompare() => 값의 위치를 0,1,-1로 반환

문자열로 변환
String()
파라미터의 값을 String으로 변환하여 반환
값이 없으면 빈문자열을 반환
빈무자열에 넘버를 더해서 사용해도 스트링 타입으로 변환할수있지만
String() 이거가 더 가독성이 좋다.

new String(123);
String 인스턴스를 생성하여 반환

valueOf() 
인스턴스의 프리미티브 값 반환

length프로퍼티
문자 수 반환
let value = 'avx'
console.log(value.length);

위에 value는 JS내부에서 만든 인스턴스다.
그래서 value.length로 찍으면 JS는 type을 구하고 string이면 new String으로 진행한다. 그리고 value에는 우리의 string이 들어가있으므로
.length를 찍으면 문자열의 길이를 볼수있다.
length 프로퍼티와 PrimitiveValue는 차이가 없다 하지만 PrimitiveValue는 대괄호 두개로 감싸져 있다. 
즉 이건 외부가 아닌 내부에서 사용하겠다는 뜻이다.

trim()
이건 즉 화이트 스페이스 삭제하는 코드이다.
즉 앞 뒤 공백이 있으면 그걸 없애는거다.
value.trim().length를 찍으면 삭제한 공간을 반환한다.

toString()
value.toString(); 형태
value는 문자열을 작성한다
근데 이상한거는 value를 문자열로 작성해야한다. 이상하다. 그냥 value를 쓰면 되는거 아닌가?

'123'.toString();
즉, String 타입을 String타입으로 변환
의미가 없다?

의미가 있는 이유

'123'을 object 타입으로 인식하여 변환하기 때문에 String String 오브젝트에 toString() 이 있는 것입니다.

Js 함수 호출 구조
우선, 데이터 타입으로
- 오브젝트를 결정하고
- 오브젝트의 함수를 호출합니다.

toString(123)
- 123을 파라미터에 작성

ex)
let value = 123;
value.toString();

'123'.toString();

1.value.toString()은
2.Number 오브젝트의 toString()을 호출한다.

3.'123'.toString()은
4.String오브젝트의 toString()을 호출합니다.

오브젝트가 없고 파라미터에만 작성한 경우
toString(123);
이 상태는 123을 오브젝트로 간주하여 object 형태를 문자열로 변환한다.

charAt()
인덱스의 문자를 반환
let value = 'sports'
console.log(value.charAt(1));
//p가 반환한다,

문자열 길이보다 인덱스가 더 크면 빈문자열 반환한다.
일반적으로 존재하지 않으면 undefined를 반환한다.

하지만 ES5부터는 value[1]이런 형식으로 사용할수 있다.

indexOf()
data위치의 문자열에서 파라미터의 문자와 같은 첫번째 인덱스를 반환
검색기준
왼쪽에서 오른쪽으로 검색
ex)
let value = '12313'
console.log(value.indexof(2));
//1
값을 구하면 더이상값을 구하지 않는다. 
첫번째는 검색 대상, 두번째 파라미터는 검색 시작 인덱스로 인지할수있다.
값이 없으면 -1 을 반환하는 특징이 있다.

lastIndexOf()
data 위치의 문자열에서 파라미터의 문자와 같은 인덱스를 반환
단, 뒤에서 앞으로 검색한다.

substring()
두개 파마미터 받음 첫번째 인덱스 부터 두번째 인덱스 직전까지 반환
첫번째만 반환한다고 생각하면 거기부터 끝까지
파라미터가 없으면 전체를 반환한다.

substr()
파라미터의시작 인덱스부터
지정한 문자 수를 반환
첫번째 파라미터 값이 음수이면 length에서 파라미터 값을 더해 시작 인덱스로 사용
두번째 파라미터값을 작성하지 않으면 양수 무한대로 간주한다.

slice()
파라미터의 시작 인덱스부터 끝 인덱스 직전까지 반환
첫번째 파라미터 부터 두번째 직전까지 반환

정규표현식을 사용하는 함수
문자열을 패턴으로 매치


